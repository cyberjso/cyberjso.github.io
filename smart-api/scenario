{
  "apiVersion": "1.0.0",
  "swaggerVersion": "1.2",
  "consumes": [
    "application/octet-stream"
  ],
  "produces": [
    "application/octet-stream"
  ],
  "apis": [
    {
      "path": "/environment/scenario",
      "operations": [
        {
          "method": "GET",
          "summary": "Retorna todos os cenários aos quais o usuário tem acessso",
          "type": "ScenariosProto",
          "nickname": "retrieveUserScenarios",
		  "parameters": [
            {
              "name": "body",
              "description": "Conterá o userOwner e o offset que será usado para paginação",
              "required": true,
              "type": "ScenariosProto",
              "paramType": "body"
            }
          ],
          "responseMessages": [
            {
              "code": 500,
              "message": "Mensagem de erro com a causa"
              
            },
            {
              "code": 404,
			  "message": "Não existem cenários para serem retornados"
            },
            {
              "code": 200,
			  "message": "retorna Response class"
            }
          ]
        },
		{
          "method": "GET",
          "summary": "Retorna dados de um cenário especifico",
          "type": "ScenarioProto",
          "nickname": "retrieve",
		  "parameters": [
            {
              "name": "body",
              "description": "Retorna dados de um cenário baseado no seu identificador",
              "required": true,
              "type": "ScenarioProto",
              "paramType": "body"
            }
          ],
          "responseMessages": [
            {
              "code": 500,
              "message": "Mensagem de erro com a causa"
              
            },
            {
              "code": 404,
			  "message": "O cenário pesquisado não existe"
            },
            {
              "code": 200,
			  "message": "retorna Response class"
            }
          ]
        },
		{
	      "method": "POST",
          "summary": "Vai inserir um novo cenário para um dado usuário",
          "type": "ScenariosProto",
		  "notes": "Será enviado apenas o cenário que está sendo adicionado. A central terá que inclui-lo aos demais caso existam. A central também será responsável por gerar um identificador unico para cada registro",
		  "nickname": "createUserScenario",
		  "parameters": [
            {
              "name": "body",
              "description": "Struct com os dados do cenário que está sendo adicionado",
              "required": true,
              "type": "ScenariosProto",
              "paramType": "body"
            }
          ],
		  
          "responseMessages": [
            {
              "code": 500,
              "message": "Mensagem de erro com a causa"
              
            },
            {
              "code": 200,
			  "message": ""
            }
          ]		
		},
		{
	      "method": "PUT",
          "summary": "Atualiza dados de um cenário",
          "type": "ScenariosProto",
		  "notes": "Será enviado apenas o ambiente que está sendo atualizado. ",         
		  "nickname": "udateUserEnvironment",
		  "parameters": [
            {
              "name": "body",
              "description": "Struct com os dados do cenário que está sendo atualizado",
              "required": true,
              "type": "ScenariosProto",
              "paramType": "body"
            }
          ],
          "responseMessages": [
            {
              "code": 500,
              "message": "Mensagem de erro com a causa"
              
            },
            {
              "code": 200,
			  "message": ""
            }
          ]		
		},
		{
	      "method": "DELETE",
          "summary": "Remove um cenário existente",
          "type": "ScenariosProto",
		  "nickname": "deleteUserEnvironment",
		  "parameters": [
            {
              "name": "body",
              "description": "Struct com os dados do cenário que está sendo removido. Neste caso os dados do usuário mais o id do cenário",
              "required": true,
              "type": "ScenariosProto",
              "paramType": "body"
            }
          ],
          "responseMessages": [
            {
              "code": 500,
              "message": "Mensagem de erro com a causa"
              
            },
            {
              "code": 200,
			  "message": ""
            }
          ]		
		}		
      ]
    },
	{
      "path": "/environment/scenario/schedule",
      "operations": [
        {
          "method": "GET",
          "summary": "Retorna todos os agendamentos de um dados cenário",
          "type": "SchedulesProto",
		  "parameters": [
            {
              "name": "body",
              "description": "Conterá preeenchido apenas scenarioId e userOwner",
              "required": true,
              "type": "SchedulesProto",
              "paramType": "body"
            }
          ],
          "nickname": "retrieveSchedules", 
          "responseMessages": [
            {
              "code": 500,
              "message": "Mensagem de erro com a causa"
            },
			{
              "code": 404,
              "message": "Não existe agendamento para o cenário"
            },
      			
            {
              "code": 200,
              "message": "retorna Response class"
            }
          ]
        },
		{
          "method": "PUT",
          "summary": "Atualiza os agendamentos de um cenário",
          "type": "void",
		  "parameters": [
            {
              "name": "body",
              "description": "Atualiza a lista com os agendamentos de um cenário",
              "required": true,
              "type": "SchedulesProto",
              "paramType": "body"
            }
          ],
          "nickname": "updateSchedules", 
          "responseMessages": [
            {
              "code": 500,
              "message": "Mensagem de erro com a causa"
            },
            {
              "code": 200,
              "message": ""
            }
          ]
        }				
      ]
    }
	
  ],
  "models": {
    "ScenariosProto": {
      "id": "ScenariosProto",
      "properties": {
        "userOwner": {
          "type": "char",
		  "required": true
        },
        "offset": {
          "type": "int32"
        },
		"scenario": {
			"type" : "ScenarioProto"
		}
      }
    },
	"ScenarioProto": {
      "id": "ScenarioProto",
      "properties": {
        "uuid": {
          "type": "char",
		  "required": true
        },
        "desc": {
          "type": "char"
        },
		"iconId" : {
			"type": "int32"
		},
		"users" : {
			"type" : "array"
		},
		"devices" : {
			"type" : "array"
		}
      }
    },
	"SchedulesProto" : {
		"id" : "SchedulesProto" ,
		"properties" :{
			"scenarioId" : {
				"type": "char"
			},
			"userOwner" : {
				"type" : "char"
			},
			"schedules" : {
				"type" : "ScheduleProto"
			}		
		}
	},
	"ScheduleProto": {
		"id": "ScheduleProto",
		"properties" : {
			"scheduleUuid" : {
				"type" : "char"
			},
			"desc" : {	
				"type" : "char"
			},
			"weekDays" : {	
				"type" : "int32"
			},
			"devices" : {
				"type" : "char"
			},
			"hrIni" : {	
				"type" : "char"
			},
			"hrFim" : {	
				"type" : "char"
			},
			"positionCoordintates": {
				"type" : "char"
			}
		}
	}	
  }
}